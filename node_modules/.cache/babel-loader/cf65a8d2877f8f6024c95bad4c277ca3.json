{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johnakhilomen/Downloads/noteful-main 3/src/context/FoldersContext.js\";\nimport React, { Component, createContext } from 'react';\nimport conf from \"../config\";\nimport { v4 as uuidv4 } from 'uuid';\nexport const FolderContext = /*#__PURE__*/createContext();\n\nclass FolderContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      folders: [],\n      notes: [],\n      notename: \"\",\n      content: \"\",\n      folderSelected: \"\",\n      name: \"\"\n    };\n\n    this.fetchCall = api => {\n      return fetch(api);\n    };\n\n    this.getId = () => {\n      if (!this.state.folderSelected) {\n        console.error(\"No selected folder!\");\n      }\n\n      let res = this.state.folders.find(it => it.name == this.state.folderSelected);\n\n      if (!res) {\n        alert(\"Please select a folder to add note to\");\n        return false;\n      }\n\n      return res.id;\n    };\n\n    this.handleInput = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.addNote = async e => {\n      e.preventDefault();\n\n      if (!this.getId()) {\n        return false;\n      }\n\n      let notesLocal = this.state.notes; // if(this.getId()){\n      //     notesLocal.push(\n      // {\n      //     \"id\": this.getId(),\n      //     \"name\":this.state.notename,\n      //     \"modified\": new Date(),\n      //     \"content\": this.state.content\n      // }\n      //     );\n\n      this.setState({\n        notes: [{\n          \"id\": '1234',\n          \"name\": 'test',\n          \"modified\": new Date(),\n          \"content\": 'testContent'\n        }]\n      }); // }\n      // window.location.reload();\n      // alert(\"Note Added!\");\n      // window.history.back();\n    };\n\n    this.addFolder = async e => {\n      e.preventDefault();\n      let foldersLocal = this.state.folders;\n      foldersLocal.push({\n        id: uuidv4(),\n        name: this.state.name\n      });\n      console.log(foldersLocal[foldersLocal.length - 1].id);\n      this.setState({\n        folders: foldersLocal\n      });\n      console.log(this.state.folders);\n      alert(\"Folder Added!\");\n    };\n\n    this.removeNote = id => {\n      let newNotes = this.state.notes.filter(note => note.id !== id);\n      this.setState({\n        notes: newNotes\n      });\n    };\n  }\n\n  async componentWillMount() {\n    try {\n      let notes = await (await this.fetchCall(conf.noteapi)).json();\n      let folders = await (await this.fetchCall(conf.folderapi)).json();\n      this.setState({\n        notes: notes,\n        folders: folders\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(FolderContext.Provider, {\n      value: { ...this.state,\n        handleInput: this.handleInput,\n        addNote: this.addNote,\n        addFolder: this.addFolder,\n        removeNote: this.removeNote\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FolderContextProvider;","map":{"version":3,"sources":["/Users/johnakhilomen/Downloads/noteful-main 3/src/context/FoldersContext.js"],"names":["React","Component","createContext","conf","v4","uuidv4","FolderContext","FolderContextProvider","state","folders","notes","notename","content","folderSelected","name","fetchCall","api","fetch","getId","console","error","res","find","it","alert","id","handleInput","e","value","target","setState","addNote","preventDefault","notesLocal","Date","addFolder","foldersLocal","push","log","length","removeNote","newNotes","filter","note","componentWillMount","noteapi","json","folderapi","err","render","props","children"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from 'react';\nimport conf from \"../config\";\nimport {v4 as uuidv4} from 'uuid'\n\nexport const FolderContext = createContext();\n\nclass FolderContextProvider extends Component {\n    state = { \n        folders:[],\n        notes:[],\n        notename: \"\",\n        content: \"\",\n        folderSelected: \"\",\n        name: \"\"\n     }\n\n     fetchCall = (api) => {\n        return fetch(api);\n    }\n\n \n     async componentWillMount() {\n        try{\n                let notes = await (await this.fetchCall(conf.noteapi)).json();\n                let folders = await (await this.fetchCall(conf.folderapi)).json();\n                this.setState({\n                  notes:notes,\n                  folders: folders\n                });\n        }\n        catch(err)\n        {\n          console.error(err);\n        }\n    \n    } \n\n    getId = () => {\n        if(!this.state.folderSelected)\n        {\n            console.error(\"No selected folder!\")\n        }\n        let res = this.state.folders.find(it=> it.name == this.state.folderSelected);\n        if(!res)\n        {\n            alert(\"Please select a folder to add note to\");\n            return false;\n        }\n        return res.id;\n     }\n    handleInput = (e) => {\n        const{name, value} = e.target;\n        this.setState({\n            [name]: value\n        });\n    }\n   \n    addNote = async (e) => {\n        e.preventDefault();\n        if(!this.getId())\n        {\n            return false;\n        }\n        let notesLocal = this.state.notes;\n        \n        // if(this.getId()){\n        //     notesLocal.push(\n                // {\n                //     \"id\": this.getId(),\n                //     \"name\":this.state.notename,\n                //     \"modified\": new Date(),\n                //     \"content\": this.state.content\n    \n                // }\n        //     );\n            this.setState(\n                {\n                notes: [        \n                    {\n                    \"id\": '1234',\n                    \"name\":'test',\n                    \"modified\": new Date(),\n                    \"content\": 'testContent'\n                }]\n            })\n           \n        // }\n        // window.location.reload();\n        // alert(\"Note Added!\");\n        // window.history.back();\n   \n    };\n\n\n\n    addFolder = async (e) => {\n        e.preventDefault();\n        let foldersLocal = this.state.folders;\n        foldersLocal.push({\n            id:uuidv4(),\n            name: this.state.name\n        });\n        console.log(foldersLocal[foldersLocal.length - 1].id);\n        this.setState({\n            folders: foldersLocal\n        })\n        console.log(this.state.folders)\n        alert(\"Folder Added!\");\n    }\n\n    removeNote = (id) =>\n    {\n       let newNotes =  this.state.notes.filter(note=> note.id !== id);\n       this.setState({\n           notes: newNotes\n       });\n    }\n  \n    render() { \n        return (\n            <FolderContext.Provider value={{...this.state, handleInput: this.handleInput, addNote: this.addNote, addFolder: this.addFolder, removeNote: this.removeNote\n            }}>\n                {this.props.children}\n            </FolderContext.Provider>\n          );\n    }\n}\n \nexport default FolderContextProvider;"]},"metadata":{},"sourceType":"module"}